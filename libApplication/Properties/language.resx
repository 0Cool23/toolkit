<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="APP_CONFIG_NULL_EXCEPTION" xml:space="preserve">
    <value>app_config must not be a null value.</value>
  </data>
  <data name="ARGS_NULL_EXCEPTION" xml:space="preserve">
    <value>args and arg_table must not be null values.</value>
  </data>
  <data name="ASSEMBLY_NULL_EXCEPTION" xml:space="preserve">
    <value>Argument assembly must not be a null value.</value>
  </data>
  <data name="BUILDINFO_EXCEPTION" xml:space="preserve">
    <value>Display build information.</value>
  </data>
  <data name="BUILD_TYPE_NAME_EXCEPTION" xml:space="preserve">
    <value>Argument build_type_name  must not be an empty string or null value.</value>
  </data>
  <data name="DIRECTORY_NOT_FOUND" xml:space="preserve">
    <value>Directory '{0}' does not exist or is not accessible.</value>
  </data>
  <data name="ENTRY_NULL_EXCEPTION" xml:space="preserve">
    <value>Argument entry must not be a null value.</value>
  </data>
  <data name="EXCEPTION" xml:space="preserve">
    <value>Caught exception: {0}</value>
  </data>
  <data name="FIELD_INFO_LIST_NULL_EXCEPTION" xml:space="preserve">
    <value>Argument field_info_list must not be a null value.</value>
  </data>
  <data name="FIELD_NAME_LIST_NULL_EXCEPTION" xml:space="preserve">
    <value>Argument field_name_list must not be a null value.</value>
  </data>
  <data name="FIELD_NAME_NULL_EXCEPTION" xml:space="preserve">
    <value>Argument field_name must not be an empty string or null value.</value>
  </data>
  <data name="FILE_NOT_FOUND" xml:space="preserve">
    <value>Filename '{0}' does not exist or is not accessible.</value>
  </data>
  <data name="FORMAT_INVALID_BINARY_DIGITS" xml:space="preserve">
    <value>Binary number '{0}' contains invalid digits.</value>
  </data>
  <data name="FORMAT_INVALID_BINARY_PREFIX" xml:space="preserve">
    <value>Binary numbers must start with '0b' prefix.</value>
  </data>
  <data name="FORMAT_INVALID_DECIMAL_DIGITS" xml:space="preserve">
    <value>Decimal number '{0}' contains invalid digits.</value>
  </data>
  <data name="FORMAT_INVALID_HEXADECIMAL_DIGITS" xml:space="preserve">
    <value>Hexadecimal number '{0}' contains invalid digits.</value>
  </data>
  <data name="FORMAT_INVALID_HEXADECIMAL_PREFIX" xml:space="preserve">
    <value>Hexadecimal numbers must start with '0x' prefix.</value>
  </data>
  <data name="FORMAT_INVALID_OCTAL_DIGITS" xml:space="preserve">
    <value>Octal number '{0}' contains invalid digits.</value>
  </data>
  <data name="FORMAT_INVALID_OCTAL_PREFIX" xml:space="preserve">
    <value>Octal numbers must start with '0' prefix.</value>
  </data>
  <data name="HELP_BUILD_INFO" xml:space="preserve">
    <value>Display version and build information.</value>
  </data>
  <data name="HELP_HELP_INFO" xml:space="preserve">
    <value>Display help message.</value>
  </data>
  <data name="HELP_LICENSE_INFO" xml:space="preserve">
    <value>Display license and version information.</value>
  </data>
  <data name="HELP_VERBOSITY_INFO" xml:space="preserve">
    <value>Increase verbose level.</value>
  </data>
  <data name="INVALID_ARG_NAME_EXCEPTION" xml:space="preserve">
    <value>Invalid value for short_arg and long_arg.</value>
  </data>
  <data name="INVALID_DATE_FORMAT" xml:space="preserve">
    <value>Invalid datestamp format, could not parse datetime string '{0}'.</value>
  </data>
  <data name="INVALID_HELP_TEXT_EXCEPTION" xml:space="preserve">
    <value>Help text must not be a an emty string or null and have at least one character ending with '.'.</value>
  </data>
  <data name="INVALID_OPTION_EXCEPTION" xml:space="preserve">
    <value>Invalid option '{0}'.</value>
  </data>
  <data name="INVALID_REAL_NUMBER_FORMAT" xml:space="preserve">
    <value>The real number format is invalid '{0}'.</value>
  </data>
  <data name="INVALID_SHORT_ARG_EXCEPTION" xml:space="preserve">
    <value>short_arg must be a digit, letter or 0x00.</value>
  </data>
  <data name="LICENSE_EXCEPTION" xml:space="preserve">
    <value>Display license information.</value>
  </data>
  <data name="LONG_ARG_EXCEPTION" xml:space="preserve">
    <value>long_arg is reserverd for application or was already used.</value>
  </data>
  <data name="MANDATORY_ARG_EXCEPTION" xml:space="preserve">
    <value>Argument '{0}' is mandatory.</value>
  </data>
  <data name="NO_ARGUMENT_EXCEPTION" xml:space="preserve">
    <value>Option '{0}' must not have an argument.</value>
  </data>
  <data name="NUMBER_OUT_OF_RANGE" xml:space="preserve">
    <value>Numeric value for parameter '{0}' is not in range [{1}..{2}].</value>
  </data>
  <data name="OPTION_STR_EXCEPTION" xml:space="preserve">
    <value>Option string may not be an empty string or null value.</value>
  </data>
  <data name="OPTION_SYMBOL_EXCEPTION" xml:space="preserve">
    <value>Option string does not match the expected unit type {0}.</value>
  </data>
  <data name="PARAM_NULL_EXCEPTION" xml:space="preserve">
    <value>Argument param must not be a null value.</value>
  </data>
  <data name="REQUIRED_ARGUMENT_EXCEPTION" xml:space="preserve">
    <value>Option '{0}' must have an argument.</value>
  </data>
  <data name="SHORT_ARG_EXCEPTION" xml:space="preserve">
    <value>short_arg is reserverd for application or was already used.</value>
  </data>
  <data name="SYMBOL_NULL_EXCEPTION" xml:space="preserve">
    <value>Symbol argument may not be a null or empty string value.</value>
  </data>
  <data name="TIME_VALUE_FORMAT" xml:space="preserve">
    <value>TimeValue  '{0}' has unparsable format.</value>
  </data>
  <data name="UNHANDLED_ARG_TYPE_EXCEPTION" xml:space="preserve">
    <value>Unhandled ArgType for option '{0}'.</value>
  </data>
  <data name="USAGE_EXCEPTION" xml:space="preserve">
    <value>Display usage information.</value>
  </data>
  <data name="VALUE_NULL_EXCEPTION" xml:space="preserve">
    <value>Argument initial value string must not be a null value.</value>
  </data>
</root>